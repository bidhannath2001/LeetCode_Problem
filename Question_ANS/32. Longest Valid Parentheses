Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring
.
Example 1:
Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 
Constraints:
0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

//solution1
class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int>st;
        st.push(-1);
        int ans = 0;
        for(int i=0;i<s.length();i++){
            if(s[i]=='(') st.push(i);
            else{
                st.pop();
                if(st.empty()) st.push(i);
                else ans = max(ans,i-st.top());
            }
        }
        return ans;
    }
};

//solution2
class Solution {
public:
    int longestValidParentheses(string s) {
        int ans = 0;
        for(int i=0;i<s.length();i++){
            int left = 0;
            int right = 0;
            for(int j=i;j<s.length();j++){
                if(s[j] == '(')left++;
                else right++;
                if(left == right){
                    ans = max(ans,j-i+1);

                }
                else if(right>left){
                    break;
                }
            }
        }
        return ans;
    }
};
